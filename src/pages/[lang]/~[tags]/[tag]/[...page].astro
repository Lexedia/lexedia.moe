---
/*
 * MIT License
 *
 * Copyright (c) 2024 Lina (Lexedia) L.
 */

import type { Page, GetStaticPaths } from 'astro'
import type { CollectionEntry } from 'astro:content'
import BaseLayout from '@/layouts/Base'
import {
  getAllPosts, getSupportedLanguages, filterByLanguage, getUniqueTags, sortMDByDate, getPostsByTag, type SupportedLanguage,
  useUITranslations,
} from '@/utils'
import PostPreview from '@/components/blog/MainPostPreview'

interface Props {
  page: Page<CollectionEntry<'blog'>>
}

import Pagination from '@/components/Pagination'
import { siteConfig } from 'src/consts'
import routing from '@/i18n/routing'

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const allPosts = await getAllPosts('blog')
  const allPostsByDate = sortMDByDate(allPosts)
  const uniqueTags = getUniqueTags(allPostsByDate)

  return getSupportedLanguages().flatMap((lang) => {
    return uniqueTags.flatMap((tag) => {
      const postsFilteredByTag = getPostsByTag(tag, allPostsByDate)
      const postsFilteredByLang = filterByLanguage(postsFilteredByTag, lang)

      const tags = routing[lang].tags.text

      return paginate(postsFilteredByLang, {
        params: {
          lang,
          tag,
          tags,
        },
        pageSize: siteConfig.settings.paginationSize,
      })
    })
  })
}

const { page } = Astro.props
const { tag, lang } = Astro.params as {
  tag: string,
  lang: SupportedLanguage
}

const t = useUITranslations(lang)

const meta = {
  title: `${t('tags.title').text}: ${tag}`,
  description: t('tags.description', 'text', tag),
}

const paginationProps = {
  ...(page.url.prev && {
    prevUrl: {
      url: page.url.prev,
      text: `${t('general.previous').text} ${t('tags.title').plural}`,
    },
  }),
  ...(page.url.next && {
    nextUrl: {
      url: page.url.next,
      text: `${t('general.next').text} ${t('tags.title').plural} →`,
    },
  }),
}

const tagRoute = routing[lang].tags.text
---

<BaseLayout title={meta.title} description={meta.description}>
  <h1 class='title flex items-center'>
    <a href={`/${lang}/~${tagRoute}/`} class='text-accent sm:hover:underline'>{t('tags.title').plural}</a>
    <span class='me-3 ms-2'>→</span>
    <span>#{tag}</span>
  </h1>
  <ul class='flex flex-col gap-4'>
    {page.data.map((post) => <PostPreview post={post} withDesc />)}
  </ul>
  <Pagination {...paginationProps} />
</BaseLayout>
