---
/*
 * MIT License
 *
 * Copyright (c) 2024 Lina (Lexedia) L.
 */

import type { GetStaticPaths } from 'astro'
import {
  filterByLanguage, getAllPosts, getSlugFromCollectionEntry, sortMDByDate, useUITranslations,
} from '@/utils'
import BaseLayout from '@/layouts/Base'
import FormattedDate from '@/components/FormattedDate'
import type { CollectionEntry } from 'astro:content'
import { getSupportedLanguages } from '@/utils'
import routing from '@/i18n/routing'

const allPosts = await getAllPosts('blog', true)
const allPostsByDate = sortMDByDate(allPosts, 'ascending')

export const getStaticPaths = (() => {
  return getSupportedLanguages().map((lang) => {
    const archive = routing[lang].archive.text

    return {
      params: {
        lang,
        archive,
      },
    }
  })
}) satisfies GetStaticPaths

const { lang } = Astro.params
const t = useUITranslations(lang)
const postsFilteredByLanguage = filterByLanguage(allPostsByDate, lang)

const getGroupsByYear = (posts: CollectionEntry<'blog'>[]): Record<string, CollectionEntry<'blog'>[]> =>
  posts.reduce<Record<string, CollectionEntry<'blog'>[]>>((groups, p) => {
    const date = new Date(p.data.pubDate)
    const year = date.getFullYear().toString()
    if (!groups[year]) {
      groups[year] = []
    }
    groups[year]!.push(p)
    return groups
  }, {})


const groupArray = (posts: CollectionEntry<'blog'>[]) => {
  const groups = getGroupsByYear(posts)
  const keys = Object.keys(groups)
  return keys.map((year) => {
    return {
      year,
      posts: groups[year],
    }
  })
}

const archivedPosts = groupArray(postsFilteredByLanguage).toReversed()
const dateFormat = {
  locale: lang,
  options: {
    month: 'short',
    day: '2-digit',
  } as Intl.DateTimeFormatOptions,
}
---

<BaseLayout title={t('archive.title').text} description={t('archive.description').text}>
  <main class='space-y-4'>
    {
      archivedPosts.map((group) => (
        <ul class='space-y-2'>
          <h2 class='title' id={group.year}>
            <a href={`#${group.year}`} class='-ml-2 anchor-link'>
              <time datetime={group.year}>{group.year}</time>
            </a>
          </h2>
          {group.posts!.map((p) => (
            <li>
              <FormattedDate date={p.data.updatedDate ?? p.data.pubDate} dateTimeOptions={dateFormat.options} locale={dateFormat.locale} />
              <a class='anchor-link' href={`/${lang}/~blog/${getSlugFromCollectionEntry(p)}`}>
                {p.data.title}
              </a>
            </li>
          ))}
        </ul>
      ))
    }
  </main>
</BaseLayout>
