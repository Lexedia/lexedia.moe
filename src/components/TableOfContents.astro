---
/*
 * MIT License
 *
 * Copyright (c) 2024 Lina (Lexedia) L.
 */

import type { MarkdownHeading } from 'astro'
import TableOfContentsHeading from '@/components/TableOfContentsHeading'
import { useUITranslations, type SupportedLanguage } from '@/utils'
const { headings } = Astro.props
const toc = buildToc(headings)

export interface TocItem extends MarkdownHeading {
  subheadings: TocItem[];
}

function diveChildren(item: TocItem, depth: number): TocItem[] {
  if (depth === 1 || !item.subheadings.length) {
    return item.subheadings
  } else {
    return diveChildren(
      item.subheadings[item.subheadings.length - 1] as TocItem,
      depth - 1,
    )
  }
}

function buildToc(headings: readonly MarkdownHeading[]) {
  const bodyHeadings = headings.filter(({ depth }) => depth > 1)
  const toc: TocItem[] = []

  bodyHeadings.forEach((h) => {
    const heading: TocItem = {
      ...h,
      subheadings: [],
    }

    if (heading.depth === 2) {
      toc.push(heading)
    } else {
      const lastItemInToc = toc.at(-1)!
      if (heading.depth < (lastItemInToc?.depth ?? Infinity)) {
        throw new Error(`Orphan heading found: ${heading.text}.`)
      }

      const gap = heading.depth - lastItemInToc.depth
      const target = diveChildren(lastItemInToc, gap)
      target.push(heading)
    }
  })
  return toc
}

const { lang } = Astro.params
const translate = useUITranslations(lang as SupportedLanguage);
---

<nav class="sticky top-20 order-2 hidden basis-64 lg:block">
  <hr />
  <h2 class="font-bold text-lg">
    {translate('sidebar.tableOfContents').text}
  </h2>
  <ul class="-me-32" id="toc">
    {toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
  </ul>
</nav>

<script>
const toc = document.getElementById('toc')
if (toc) {
  toc?.addEventListener('click', (e) => {
    const prevHeading = window.location.hash.slice(1)
    const prevLink = document.getElementById(`toc-${prevHeading}`)

    if (prevLink instanceof HTMLElement) {
      prevLink?.classList.remove('active-toc')
    }

    if (e.target instanceof HTMLElement) {
      e.target.classList.add('active-toc')
    }
  })
}
</script>
